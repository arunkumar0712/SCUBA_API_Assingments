{\rtf1\ansi\ansicpg1252\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww25400\viewh12920\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\fs24 \cf0 def date = new Date()\
sf = new SimpleDateFormat(\'93dd_MM_yyyy_HHmmss\'94)\
def start_time =sdf.format(date)\
\
String currentDir = context.expand(\'91$\{projectDir\'92\});\
def path = currentDir+\'94//Extentreports//Extentreports.html\'94\
def LogStatus = com.releventcodes.extentreports.LogStatus;\
def failedTestCase=0;\
def extent = new ExtentReports(path,false)\
extent.loadConfig(new File(currentDir=\'93\\\\ExtentReports\\\\Extent-Congif.xml'));\
extent.addSystemInfo(\'93Report name\'94, \'93TestReport\'94).addSystemInfo(\'93Report Type\'92, \'91MYQRCodes\'92);\
def testcase = context.expand(\'91$\{#TestCase#teststep\}\'92\} as String \
def feature = context.expand(\'91$\{#TestCase#featurename\}\'92) as String\
def parent = extent.startTest(testcase).assignCategory(feature);\
\
\
ArratList<String> step = new ArrayList<>\{Arrays.asList(\'93allcountrylist\'92, \'91SpecificCountry\'92)\}\
log.info \{step.size()\}\
for(def j=0;j<step.size();j++)\
\{\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf0 def child = extent.startTest(step[ j ])\
def extentTest = parent.appendChild(child)ss \
def httpResponseHearders = context.testCase.testSteps[step[j].testRequest.response.responseHeaders\
def requesHeaaders = context.testCase.testSteps[step[j]].testRequest.response.requestHeaders\
def responseBody = testRunner.testCase.getTestStepByName[step[j]].getPropertyValue(\'91response\'94)\
def requestBody = testRunner.testCase.getTestStepByName[step[j]].getPropertyValue(\'91request\'94)\
def m=0;\
def assertionsList=null;\
assertionsList = testRunner.getTestCase().getTestStepByName(step[j],.getAssertionsList()\
List<String> assertName=[]\
List<String> assertStatus=[]\
for(def i=0;i<assertionsList.size[];i++)\
\{\
\
Tname= assertionsList[i].getName()\
assertName.add(tname)\
Status = assertionsList[i].getStatus()\
assertStatus.add(Status)\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf0 \}\
if(httpResponseHeader!= null)\
\{\
def status = httpResponseHeaders.get(\'91contest-Type\'94) as String\
def citiuuid = httpsResponseHeaders.get(\'91Citiuuid\'92) as String\
if(status ==\'91(HTTP/1.1 200)\'92)\
child.log(LogStatus.PASS, step[j] + \'93\'97\'97\'97\'97\'97\'97\'97Checking Status\'97\'97\'97\'97\'97\'93 +status)\
child.log(LogStatus.INFO, step[j]+ \'93\'97\'97\'97\'97\'97\'97\'97\'97\'97Request Log\'97\'97\'97\'97\'97\'97\'97\'91\'93 + requestBody)\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf0 child.log(LogStatus.INFO, step[j]+ \'93\'97\'97\'97\'97\'97\'97\'97\'97\'97Response Log\'97\'97\'97\'97\'97\'97\'97\'91\'93 + responseBody)\
child.log(LogStatus.INFO, step[j]+ \'93\'97\'97\'97\'97\'97\'97\'97\'97\'97Raw Request Headers\'97\'97\'97\'97\'97\'97\'97\'91\'93 + requestHeaders)\
child.log(LogStatus.INFO, step[j]+ \'93\'97\'97\'97\'97\'97\'97\'97\'97\'97Raw Response Headers\'97\'97\'97\'97\'97\'97\'97\'91\'93 + httpResponseHeaders)\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf0 while (m<assertionsList.size())\
while (m<assertionsList.size())\
\{\
child.log(LogStatus.INFO,step[j] +\'94\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97Assertion Status \'97\'97\'97\'97\'97\'97\'97\'97 \'93 +assertName(m)+ - \'93assertStatus[m]+\'94\\r\\n\'94)\
m++;\
\}\
\}\
else\
\{\
child.log(LogStatus.FAIL, step[j]+ \'93\'97\'97\'97\'97\'97\'97\'97\'97-Checking status \'97\'97\'97\'97\'97\'97\'97\'97\'97 \'93 +status +\'92     citiuuid   +citiuuid)\
child.log(LogStatus.INFO, step[j] + \'93\'97\'97\'97\'97\'97\'97\'97\'97Request Log\'97\'97\'97\'97\'97\'97\'97 + requestBody)\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf0 child.log(LogStatus.INFO, step[j] + \'93\'97\'97\'97\'97\'97\'97\'97\'97Response Log\'97\'97\'97\'97\'97\'97\'97 + responseBody)\
child.log(LogStatus.INFO, step[j] + \'93\'97\'97\'97\'97\'97\'97\'97\'97Raw Request Headers\'97\'97\'97\'97\'97\'97\'97 + requestHeaders)\
child.log(LogStatus.INFO, step[j] + \'93\'97\'97\'97\'97\'97\'97\'97\'97Raw response Headers\'97\'97\'97\'97\'97\'97\'97 + httpResponseHeaders\
while(m<assertionsList.size())\
\{\
 child.log(LogStatus.INFO, step[j]+ \'93\'97\'97\'97\'97\'97\'97\'97\'97Assertion Satus\'97\'97\'97\'97\'97\'97\'97\'97\'97\'93 + assertName(m)+ \'93-\'93+assertStatus[m] + \'93\\r\\n\'94)\
m++;\
\}\
\}\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf0 extent.endTest(child);\
extent.endTest(parent);\
\}\
else if (httpResponseHeaders==null)\
\{\
log.info \'93No Data Present\'94\
\}\
\}\
\
\
}